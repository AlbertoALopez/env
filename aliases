# general alias

default_config='.envconf'

alias n='nano'
alias g='sublime'
alias al='alias | grep "^alias"'
alias nrca='n ~/env/aliases'
alias nrco='n ~/env/opt.al'
alias nrcf='n ~/env/func.al'
alias nrcg='n ~/env/git.al'
alias nrcgr='n ~/env/gradle.al'
alias nrch='n ~/env/hadoop.al'
alias nrcs='n ~/env/system.al'
alias nrcd='n ~/env/docker.al'
alias nrcaw='n ~/env/aws.al'
alias nrcp='n ~/env/pi.al'
alias nrck='n ~/env/k8s.al'
alias nrcl='n ~/env/lang.al'
alias nrc='n ~/.bashrc'
alias grca='g ~/env/aliases &'
alias grco='g ~/env/opt.al &'
alias grcf='g ~/env/func.al &'
alias grcg='g ~/env/git.al &'
alias grcgr='g ~/env/gradle.al'
alias grch='g ~/env/hadoop.al &'
alias grcs='g ~/env/system.al &'
alias grcd='g ~/env/docker.al &'
alias grcaw='g ~/env/aws.al &'
alias grcp='g ~/env/pi.al'
alias grck='g ~/env/k8s.al'
alias grcl='g ~/env/lang.al'
alias grc='g ~/.bashrc &'
alias src='source ~/.bashrc'
alias r='clear'
alias e='exit'
alias l='ls -a'
alias ll='ls -lha'
alias s='ssh -Y'
alias nt='nautilus'
alias ho='cat /etc/hosts'
alias nho='sudo nano /etc/hosts'
alias gho='sudo gedit /etc/hosts'
alias chc='ping 8.8.8.8'
alias ..='cd ..'
alias .2='cd ../..'
alias .3='cd ../../..'
alias .4='cd ../../../..'

# add temp-source (non-tracked) files to source with 'src' command
asrc() { ln -fs "$(pwd)/$1" "$HOME/env/tmp" ;}
# remove a temp-source file
rsrc() { rm "~/env/tmp/$1" ;}
# clear all temp-source files
clsrc() { for al in ~/env/tmp/*; do rm $al; done ;}
# list temp source files
alias lsrc='ll ~/env/tmp'

# env installation
#alias envapply='sh ~/env/apply.sh'

# source all '.al', used as plugin system for env
srcCustom() {
	mkdir -p ~/env/tmp
	for al in $(find ~/env -name '*.al'); do source $al; done
	for al in $(find ~/env/tmp/ -type f -name '*' ); do source $al ; done
}

add_profile() {
  if [ ! -f ~/.profile ]; then
    echo "if [ ! -f ~/.bashrc ]; then\n  . ~/.bashrc\nfi" >> ~/.profile
  fi
}

# generic map storage
mapget(){
  key="$1"
  [ -z "$2" ] && file=$default_config || file="$2"
  file="$HOME/$file"
  # find in map file
  value=$(grep "^$key:" $file)
  # parse and return value
  echo ${value/"$key:"/""}
}
mapset(){
  key="$1"
  value="$2"
  [ -z "$3" ] && file=$default_config || file="$2"
  file="$HOME/$file"
  [ ! -f "$file" ] && touch "$file"
  # lookup existing value
  oldVal=$(grep "^$key:" $file)
  # write or replace key:value pair depending if it already exists
  if [ "$oldVal" == "" ]; then
    echo "$key:$value" >> $file
  else sed -i "/^$key:/c$key:$value" $file;
  fi
}

env-ins(){
  line='curl https://raw.githubusercontent.com/rbi13/env/master/install.sh | sh'
  echo $line | cbcopy
  echo $line
}

# Exec
# activated on source call
srcCustom
